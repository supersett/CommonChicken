<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- int insertMember(MemberDTO member);//회원가입
	int updateMember(MemberDTO member);//회원정보 수정
	MemberDTO selectMember(String memEmail);//회원정보 불러오기
	List<MemberDTO> selectAllMemberList();//전체 회원정보 불러오기
	int deleteMember(String memEmail);//회원탈퇴 -->
	<!-- 
	private String memEmail;
	private String memNickname;
	private String memPw;
	private String memName;
	private String memPhone;
	private String memZipCode;
	private String memAdd1;
	private String memAdd2;
	private String memOrigin;
	private String memJoinDate;
	private int memStatus;
	private String memLastLogin;
	private String memBirthday;
	private String memAuthCode;
	private String memUpload;
		
	 -->
<mapper namespace="com.commonchicken.mapper.MemberMapper">
	<insert id="insertMember">
		insert into MEMBER_TB (MEM_EMAIL,MEM_NICKNAME,MEM_PW,MEM_NAME,MEM_PHONE,MEM_ZIP_CODE,MEM_ADD1,MEM_ADD2,MEM_ORIGIN,MEM_STATUS,MEM_BIRTHDAY,MEM_UPLOAD) 
					values(#{memEmail}, #{memNickname}, #{memPw}, #{memName}, #{memPhone},#{memZipCode}, #{memAdd1}, #{memAdd2}, #{memOrigin}, 
										1, #{memBirthday}, #{memUpload})
	
		
	</insert>
	
	
	
	
<!-- 	<update id="updateMember">
		update member_tb set mem_nickname=#{memNickname},
							 mem_name=#{memName}, 
							 mem_phone=#{memPhone}, 
							 mem_zip_code=#{memZipCode}, 
							 mem_add1=#{memAdd1}, 
							 mem_add2=#{memAdd2}, 
							 mem_origin=#{memOrigin}, 
							 mem_birthday=#{memBirthday}, 
							 mem_upload=#{memUpload}
							 where mem_email = #{memEmail}
	</update> -->
	
	<update id="updateMember">
		update member_tb	
		<set>
			<choose>
				<when test="memPw==null or memPw==''">
				 	 mem_nickname=#{memNickname},
					 mem_name=#{memName}, 
					 mem_phone=#{memPhone}, 
					 mem_zip_code=#{memZipCode}, 
					 mem_add1=#{memAdd1}, 
					 mem_add2=#{memAdd2}, 
					 mem_origin=#{memOrigin}, 
					 mem_birthday=#{memBirthday}, 
					 mem_upload=#{memUpload}			
				</when>
				<otherwise>
					 mem_pw=#{memPw}			
				</otherwise>
			</choose>
		</set>
		where mem_email = #{memEmail}
	</update>
	
	
	<select id="selectMember" resultType="MemberDTO">
		select * from MEMBER_TB WHERE MEM_EMAIL=#{memEmail}
	</select>
	
	<select id="selectAllMemberList" resultType="MemberDTO">
		select * from(select rownum rn, member.* from(select * from member_tb 
		where mem_status!=0 order by mem_email)member) where rn between #{startRow} and #{endRow}
	</select>
	
	<update id="deleteMember">
		update member_tb set mem_status=0 where mem_email = #{mem_email}
	</update>
	
	<update id="updateDeleteMember">
		update member_tb set mem_status=1 where mem_email = #{mem_email}
	</update>
	
	<select id="findId" resultType="MemberDTO">
		select * from MEMBER_TB WHERE MEM_NAME=#{memName} and MEM_PHONE=#{memPhone}
	</select>
	
	<select id="findPw" resultType="MemberDTO">
		select * from MEMBER_TB WHERE MEM_NAME=#{memName} and MEM_PHONE=#{memPhone} and MEM_EMAIL=#{memEmail}
	</select>
	<update id="updateChangeMember" parameterType="map">
		update member_tb set mem_status=#{memStatus} where mem_email = #{memEmail}
	</update>
	
	
	<select id="getMemberCount" resultType="int">
		select count(*) from member_tb where mem_status !=0
	</select>
	
	
	
</mapper>